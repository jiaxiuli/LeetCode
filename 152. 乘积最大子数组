给你一个整数数组 nums ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。

 

示例 1:

输入: [2,3,-2,4]
输出: 6
解释: 子数组 [2,3] 有最大乘积 6。
示例 2:

输入: [-2,0,-1]
输出: 0
解释: 结果不能为 2, 因为 [-2,-1] 不是子数组

/**
 * @param {number[]} nums
 * @return {number}
 */
var maxProduct = function(nums) {
    const n = nums.length;
    if(n === 0){
        return 0;
    } else if(n === 1) {
        return nums[0];
    }
    const dpMax = new Array(n);
    const dpMin = new Array(n);
    dpMax[0] = nums[0];
    dpMin[0] = nums[0];
    for( let i = 1 ; i < n ; i++ ){
        dpMax[i] = Math.max(dpMax[i-1]*nums[i], dpMin[i-1]*nums[i], nums[i]);
        dpMin[i] = Math.min(dpMax[i-1]*nums[i], dpMin[i-1]*nums[i], nums[i]);
    }
    
    return Math.max(...dpMax);
};
