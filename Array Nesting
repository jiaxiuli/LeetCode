/*
A zero-indexed array A of length N contains all integers from 0 to N-1. Find and return the longest length of set S, where S[i] = {A[i], A[A[i]], A[A[A[i]]], ... } subjected to the rule below.

Suppose the first element in S starts with the selection of element A[i] of index = i, the next element in S should be A[A[i]], and then A[A[A[i]]]â€¦ By that analogy, we stop adding right before a duplicate element occurs in S.
*/


class Solution {
    public int arrayNesting(int[] nums) {
        int maxLength = 0;
        
        for( int k = 0 ; k < nums.length ; k++ ){
        
        int i = k;
        boolean arr[] = new boolean[nums.length];
        arr[i] = true;
        int count = 1;
        
         while(true){
           
            int index = nums[i];
            if( arr[index] == true ){
                break;
            }else{
                count++;
                arr[index] = true;
            }
             i = index;
         }
            if( count > maxLength)
                maxLength = count;
           
        }
        return maxLength;
}
}
