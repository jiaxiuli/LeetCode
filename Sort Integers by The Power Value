/*Sort Integers by The Power Value
The power of an integer x is defined as the number of steps needed to transform x into 1 using the following steps:

if x is even then x = x / 2
if x is odd then x = 3 * x + 1
For example, the power of x = 3 is 7 because 3 needs 7 steps to become 1 (3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1).

Given three integers lo, hi and k. The task is to sort all integers in the interval [lo, hi] by the power value in ascending order, if two or more integers have the same power value sort them by ascending order.

Return the k-th integer in the range [lo, hi] sorted by the power value.

Notice that for any integer x (lo <= x <= hi) it is guaranteed that x will transform into 1 using these steps and that the power of x is will fit in 32 bit signed integer.
*/

class Solution {
    public int getKth(int lo, int hi, int k) {
     
        int arr[][] = new int[1001][1001];
        for( int i = 0 ; i < 1001 ; i++ ){
            for( int j = 0 ; j < 1001 ; j++ ){
                arr[i][j] = -1;
            }
        }
	        
        for( int i = lo ; i <= hi ; i++ ){
	            int x = i;
	            int count = 0;
	            while( x != 1 ){
	                if( x % 2  == 0 ){
	                     x = x/2;
	                     count++;
	                }
	                else{
	                     x = 3*x + 1;
	                     count++;
	                }   
	            }
	    arr[count][i] = i;
            
            
	        }
        int a = 0;
        for( int i = 0 ; i < 1001 ; i++ ){
            for( int j = 0 ; j < 1001 ; j++ ){
                if( arr[i][j] == -1 )
                    continue;
                else
                  a++;
                
                if( a == k )
                    return arr[i][j];
            }
        }
        return 0;
    }
}
