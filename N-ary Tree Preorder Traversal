/*
Given an n-ary tree, return the preorder traversal of its nodes' values.

Nary-Tree input serialization is represented in their level order traversal, 
each group of children is separated by the null value (See examples).
*/


/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
    
    List<Integer> list = new ArrayList<Integer>();
    
    public List<Integer> preorder(Node root) {
        if( root != null)
        search(root);
        
        return list;
    }
    public Node search(Node root){
        
        list.add(root.val);
        if(root.children == null) return null;
        
        for( Node node : root.children ){
            node = search(node);
        }
        return root;
    }
}
