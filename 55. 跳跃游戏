给定一个非负整数数组 nums ，你最初位于数组的 第一个下标 。

数组中的每个元素代表你在该位置可以跳跃的最大长度。

判断你是否能够到达最后一个下标。

示例 1：

输入：nums = [2,3,1,1,4]
输出：true
解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。
示例 2：

输入：nums = [3,2,1,0,4]
输出：false
解释：无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。

/**
 * @param {number[]} nums
 * @return {boolean}
 */
var canJump = function(nums) {
    if (nums.length === 1) return true;
    const n = nums.length;
    const dp = new Array(n);
    dp[ n - 1 ] = true;
    for( let i = n - 2 ; i >= 0 ; i-- ) {
        dp[i] = getCanJump(dp, i, i + nums[i]);
    }
    return dp[0];
};
var getCanJump = function (dp, start, end) {
    for (let i = start ; i <= end ; i++ ) {
        if ( i < dp.length ) {
            if (dp[i]) return true;
        }
    }
    return false;
}
