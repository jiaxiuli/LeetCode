/*
Given the root node of a binary search tree, 
return the sum of values of all nodes with value between L and R (inclusive).

The binary search tree is guaranteed to have unique values.
*/


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int sum = 0;
    public int rangeSumBST(TreeNode root, int L, int R) {
        dfs(root,L,R);
        return sum;
    }
    public TreeNode dfs(TreeNode root, int L, int R){
        if( root == null )return null;
        if( root.val >= L && root.val <= R )
            sum = sum + root.val;
        root.left = dfs(root.left, L, R );
        root.right = dfs( root.right, L, R );
        return root;
    }
}
