/*
Given the root of a binary tree, the level of its root is 1, the level of its children is 2, and so on.

Return the smallest level X such that the sum of all the values of nodes at level X is maximal.
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */



class Solution {
    List<Integer> list = new ArrayList<Integer>();
    
    public int maxLevelSum(TreeNode root) {
        list.add(-9999);
        dfs(root, 1);
        int max = -9999;
        int maxlevel = 0;
        for( int i = 0 ; i < list.size() ; i++ ){
            if( list.get(i) > max ){
                max = list.get(i);
                maxlevel = i;
            }
        }
        return maxlevel;
        
        
    }
    public TreeNode dfs(TreeNode root, int count){
        if( root == null) return null;
        if(count >= list.size())
		        	list.add(root.val);
		        else
		        	list.set(count, list.get(count) + root.val );
        root.left = dfs(root.left, count+1);
        root.right = dfs(root.right, count+1);
        return root;
    }
}
